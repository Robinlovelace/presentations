---
title: Reproducible research and open tools for future-proof transport planning
subtitle: Mobile Tartu 2024
format: 
  clean-revealjs:
    self-contained: true
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: Robin Lovelace
    orcid: 0000-0001-5679-6536
    email: r.lovelace@leeds.ac.uk
    affiliations: University of Leeds, Active Travel England
date: last-modified
bibliography: refs_tartu.bib
---

# Introduction {background-color="#40666e"}

## About me and my work

::: columns
::: {.column width="40%"}
::: incremental
-   Associate Professor of Transport Data Science
-   Work with government
-   Focus on impact
-   Software developer and data scientist
-   New methods for more reproducible, data-driven and participatory transport planning
:::
:::

::: {.column width="60%"}
::: {layout="[[1,2], [1]]"}
![](https://r.geocompx.org/images/cover.png)

![](https://github.com/npct/pct-team/blob/master/figures/front-page-leeds-pct-demo.png?raw=true)

![](images/paste-17.png)
:::
:::
:::

------------------------------------------------------------------------

## Contents

::: incremental
-   Definitions: what is reproducible research and future proof transport planning?
-   Reproducible research and open tools
-   Future-proof transport planning
:::

## Definitions

> a tool is a ...
> piece of software or online service; a model ...
> is method or process that is expounded in theoretical terms; software is ...
> instructions that underlies digital tools @lovelace2021

**Reproducible research**: Other people can re-generate your results

. . .

**Open source software**: Software that is free to use and modify

. . .

**Open access tools**: Web applications for transport planning that are based on open source software, that anyone can use

. . .

**Open access data**: Data that is freely available to use and share

. . .

**Future-proof** work that is likely to be useful in the medium-term future

<!-- (10 years+), regardless of (political, economic, technological) changes -->

## Reproducibility

Reproducibility is a continuous variable [@peng2011]

![](images/paste-18.png)

# Reproducible research

## Why make your research (more) reproducible?

:::: columns

::: {.column width="80%"}

![](images/paste-36.png)

Source: @raff2023

:::

::: {.column width="20%"}

::: {.incremental}

- Scientific rigour
- Benefits to your future self
- Benefits to others
- Huge increase in potential for impact

:::

:::

::::



## Why *not* make your research reproducible?

::: {.column width="20%"}
![](images/paste-28.png)
:::

::: column
-   Time

-   Know-how

-   Lack of permission

-   Software is not open

-   Data is not open access

-   Someone might use it in unethical ways

-   Someone might "steal" the work
:::

## Example of fully reproducible research

![](images/paste-23.png)

@lovelace2022

## Reproducibility and generalisability

![](images/paste-24.png)

Illustration of the ClockBoard zoning system used to visualize a geographically dependendent phenomena: air quality, measured in mass of PM10 particles, measured in micrograms per cubic meter, from the London Atmospheric Emissions Inventory (LAEI).
The facets show the data in spatial grid available from the LAEI, facet Am and aggregated to London boroughs B, to ClockBoard zones covering all the input data shown in C, and ClockBoard zones clipped by the administrative boundary of Greater London in D.

## Application: road traffic casualties

![](images/paste-26.png)

![](images/paste-27.png)

## International comparisons

::: columns
::: {.column width="70%"}
![](images/paste-25.png)
:::

::: {.column width="30%"}
**Premise**: A key reason for reproducibility is *generalisability*.
:::
:::

# Open source software and open access tools

# Future-proof transport planning {background-image="images/paste-35.png" background-opacity="0.5"}

<!-- ![](images/paste-35.png) -->

Source: [situational-awareness.ai](https://situational-awareness.ai/wp-content/uploads/2024/06/situationalawareness.pdf)

## Drivers of demand for transport planning

transport planning software was originally designed in the late 1950s and onwards to plan for

> increased use of cars \[for personal travel\], and trucks for deliveries and goods movement @boyce2015

Thankfully that is no longer a priority:

> Policy drivers have changed dramatically since then: climate change mitigation, air quality improvement and public health are prioritised in the emergent ‘sustainable mobility paradigm’ @lovelace2021

How could/should/will demand shift in the future?

## AI takeover?

<!-- <iframe src="https://ourworldindata.org/grapher/test-scores-ai-capabilities-relative-human-performance?country=Handwriting+recognition~Speech+recognition~Image+recognition~Reading+comprehension~Language+understanding~Predictive+reasoning~Code+generation~Complex+reasoning~General+knowledge+tests~Nuanced+language+interpretation~Math+problem-solving~Reading+comprehension+with+unanswerable+questions&tab=chart" loading="lazy" style="width: 100%; height: 600px; border: 0px none;" allow="web-share; clipboard-write"></iframe> -->

![](images/paste-32.png)

## Where are we headed with AI?

![](images/paste-33.png)

Source: <https://situational-awareness.ai>

## The limits of AI

![](images/paste-21.png)

[@nezhurina]

## Environmental costs of 'AI'

::: columns
::: {.column width="55%"}
![](images/paste-29.png)

![](images/paste-31.png)
:::

::: {.column width="45%"}
IT sector was already poised to become a decarbonisation bottleneck

![](images/paste-30.png)
:::
:::

Source: [theregister.com](https://www.theregister.com/2024/05/16/microsoft_co2_emissions/) and @gupta2021

## Factoring-in build-out of AI data centres

![](images/paste-34.png)

## Conclusions

-   Reproducible research is a key part of future-proofing transport planning, for your work, and for the discipline as a whole

-   Open source software and open access tools are key to this, especially if you want to have humans in the loop

-   AI is not a panacea, and has its own environmental costs

-   In this context, there are some key desirable features of future-proof transport models and associated software and tools:

    -   Open source
    -   Open access
    -   Reproducible
    -   Human-in-the-loop
    -   Easily adaptable to new data sources, methods, and demands

## References

::: {#refs}
:::

## Appendix: What if the machines *do* take over? {#sec-appendix}

-   Would you want the AIs to be trained on your work?
    -   Initial thought: no way, that's my data!
    -   Second thought: if the AIs are going to take over, they might as well be well-informed, by good information and good intentions!
-   Would you want to be able to understand how the AIs work?

...

````{=html}
<!-- ## Before you proceed...

### Requirements for the coding examples in this demo

The [clean theme](https://github.com/grantmcdermott/quarto-revealjs-clean) is

language agnostic.
Use it with R, Python, Julia, etc.
Or none of the above.
However, this demo uses R code to highlight advanced theme features.
You'll need to install some software if you'd like to render the demo "as-is".

:::{.callout-warning}

## Required software (this demo only)

### R packages

## Components

### Multicolumn III: Code and output

```{r}
#| echo: true
#| label: fig-pairs
#| fig-cap: "Pairwise scatterplot" 
#| fig-asp: 1
#| output-location: column
remotes::install_cran("tinytable")
palette("Classic Tableau")

par(
  family = "HersheySans",
  las = 1, pch = 19, cex = 1.5
)

pairs(
  iris[,1:4],
  col=iris$Species
)
```

# Tables {background-color="#40666e"}

## Markdown tables

### Default table styling

The `clean` theme rolls its own minimalist aesthetic for tables.
This should interface directly with Quarto's excellent [table support](https://quarto.org/docs/authoring/tables.html).

::: columns
::: {.column width="55%"}
``` md
| fruit  | price  |
|--------|-------:|
| apple  | 2.05   |
| pear   | 1.37   |
| orange | 3.09   |

: Fruit prices {tbl-colwidths="[75,25]"}
```
:::

::: {.column width="5%"}
:::

::: {.column width="40%"}
| fruit  | price |
|--------|------:|
| apple  |  2.05 |
| pear   |  1.37 |
| orange |  3.09 |

: Fruit prices {tbl-colwidths="\[75,25\]"}
:::
:::

## Regression tables

### Regression example

These aesthetics should carry over to any computation-based tables too.

Let's take a few slides to illustrate via a simple regression example:

```{r}
#| echo: true

library(fixest)

mods = feols(
  rating ~ complaints + privileges + learning + csw0(raises + critical),
  data = attitude
)

dict = c("rating"     = "Overall Rating",
         "complaints" = "Handling of Complaints",
         "privileges" = "No Special Priviledges",
         "learning"   = "Opportunity to Learn",
         "raises"     = "Performance-Based Raises",
         "critical"   = "Too Critical")
```

## Regression tables

### modelsummary

Popular regression table software should play nicely with this theme out of the box.
Here's an example using [modelsummary](https://modelsummary.com/) (with the default [tinytable](https://vincentarelbundock.github.io/tinytable/) backend[^1]).
See the next slide for the resulting table.

[^1]: For extra styling options (e.g., bootstrap themes), see [here](https://modelsummary.com/vignettes/appearance.html).

```{r}
#| echo: true
#| output-location: slide
#| eval: false

library(modelsummary) # Make sure you have >=v2.0.0

modelsummary(
  setNames(mods, c("(1)", "(2)")),
  coef_map = dict, stars = TRUE,
  gof_map = NA
  ) |>
  # some optional stylistic tweaks
  tinytable::group_tt(j = list("Dep. variable: Overall Rating" = 2:3)) |>
  tinytable::style_tt(i = 1:2, j = 2:3, background = "pink")
```

## Regression tables

![](images/paste-19.png)

![](images/paste-20.png)

### fixest::etable

**Aside:** We used the fantastic [fixest](https://lrberge.github.io/fixest/) package to estimate our regression models.
fixest bundles its own powerful tabling functions.
These were designed for LaTeX output, but can work with this (HTML) theme too.[^2]

[^2]: Details [here](https://lrberge.github.io/fixest/articles/etable_new_features.html).
    You need to install the `tinytex` & `pdftools` packages first.

-   Set the `output: asis` R chunk option in your Quarto doc.
-   Set the `markdown = TRUE` fixest::etable option.

```{{{r}}}
#| output: asis

setFixest_etable(markdown = TRUE, drop = "Constant")
setFixest_dict(dict)

etable(mods, highlight = .("se" = "complaints"))
```

## Regression tables

### fixest::etable (cont.)

```{r}
#| output: asis

setFixest_etable(markdown = TRUE, drop = "Constant")
setFixest_dict(dict)

etable(mods, highlight = .("se" = "complaints"), arraystretch = 1.5)
```

# Figures {background-color="#40666e"}

## Figure

![](images/kanagawa.jpg)

## Figure

### Full-size Figures

You can use the `{.background-image}` container environment to completely fill the slide background with an image.

Ideally, your figure will be the same aspect ratio as the screen that you're presenting on.

-   This can be a bit tricky because of the dynamic nature of reveal.js / HTML. But it's probably something close to 16:9.
-   Aspect ratio can also matter for a regular full-frame images (previous slide).

##  {background-image="images/kanagawa169.jpg" background-size="100%"}

## Interactive plots

```{r}
#| out-width: 75%

library(threejs)

# Approximate locations as factors
data(flights)
dest = factor(sprintf("%.2f:%.2f", flights[,3], flights[,4]))

# A table of destination frequencies
freq = sort(table(dest), decreasing=TRUE)

# The most frequent destinations in these data
frequent_destinations = names(freq)[1:10]

# Subset the flight data by destination frequency
idx = dest %in% frequent_destinations
frequent_flights = flights[idx, ]

# Lat/long and counts of frequent flights
ll = unique(frequent_flights[, 3:4])

# Plot frequent destinations as bars, and the flights to and from
# them as arcs. Adjust arc width and color by frequency.
globejs(lat=ll[, 1], long=ll[, 2], arcs=frequent_flights,
        # bodycolor="#aaaaff", arcsHeight=0.3, arcsLwd=2,
        bodycolor="#fff", arcsHeight=0.3, arcsLwd=2,
        arcsColor="#ffff00", arcsOpacity=0.15,
        atmosphere=TRUE, color="#fff", pointsize=0.5)
```

*Note: Simple flight data example using `threejs`. There are many interactive plotting options beyond this. (More [details](https://quarto.org/docs/interactive/).)*

# Other {background-color="#40666e"}

## Other

### What else can the clean theme do?

We have highlighted some theme-specific components in this demo.

But please note that all of the standard [reveal.js functionality and plugins](https://quarto.org/docs/presentations/revealjs/presenting.html) are compatible with the clean theme.
This includes:

-   [chalkboard](https://quarto.org/docs/presentations/revealjs/presenting.html#chalkboard) for annotating slides.
-   [multiplex](https://quarto.org/docs/presentations/revealjs/presenting.html#multiplex) for enabling audience navigation of your slides.
-   [pdf printing](https://quarto.org/docs/presentations/revealjs/presenting.html#print-to-pdf) in case you don't have access to a web browser.
-   Etc.

# Summary {background-color="#40666e"}

## Summary

### A minimalist and elegant presentation theme

The Quarto reveal.js [clean theme](grantmcdermott/quarto-revealjs-clean) aims to be a minimalist and elegant presention theme.
Here are some options to get you started.

Add the theme to an existing project.

``` bash
quarto install extension grantmcdermott/quarto-revealjs-clean
```

...
or, create a new project using our lean template.

``` bash
quarto use template grantmcdermott/quarto-revealjs-clean
```

...
or, create a new project using these demo slides as a full template.

``` bash
quarto use template grantmcdermott/quarto-revealjs-clean-demo
``` -->
````